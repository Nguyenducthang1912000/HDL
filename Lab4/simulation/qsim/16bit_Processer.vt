// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2020 14:22:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processer_16bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processer_16bit_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processer_16bit_vlg_check_tst (
	ADDR_o,
	ALU_Op,
	ALU_o,
	DMEM_Wr,
	DMEM_o,
	IMEM_o,
	PC_o,
	RegDr_o,
	WrSrc_o,
	ZERO_o,
	sampler_rx
);
input [2:0] ADDR_o;
input [3:0] ALU_Op;
input [15:0] ALU_o;
input  DMEM_Wr;
input [15:0] DMEM_o;
input [15:0] IMEM_o;
input [4:0] PC_o;
input [15:0] RegDr_o;
input  WrSrc_o;
input  ZERO_o;
input sampler_rx;

reg [2:0] ADDR_o_expected;
reg [3:0] ALU_Op_expected;
reg [15:0] ALU_o_expected;
reg  DMEM_Wr_expected;
reg [15:0] DMEM_o_expected;
reg [15:0] IMEM_o_expected;
reg [4:0] PC_o_expected;
reg [15:0] RegDr_o_expected;
reg  WrSrc_o_expected;
reg  ZERO_o_expected;

reg [2:0] ADDR_o_prev;
reg [3:0] ALU_Op_prev;
reg [15:0] ALU_o_prev;
reg  DMEM_Wr_prev;
reg [15:0] DMEM_o_prev;
reg [15:0] IMEM_o_prev;
reg [4:0] PC_o_prev;
reg [15:0] RegDr_o_prev;
reg  WrSrc_o_prev;
reg  ZERO_o_prev;

reg [2:0] ADDR_o_expected_prev;
reg [3:0] ALU_Op_expected_prev;
reg [15:0] ALU_o_expected_prev;
reg  DMEM_Wr_expected_prev;
reg [15:0] DMEM_o_expected_prev;
reg [15:0] IMEM_o_expected_prev;
reg [4:0] PC_o_expected_prev;
reg [15:0] RegDr_o_expected_prev;
reg  WrSrc_o_expected_prev;
reg  ZERO_o_expected_prev;

reg [2:0] last_ADDR_o_exp;
reg [3:0] last_ALU_Op_exp;
reg [15:0] last_ALU_o_exp;
reg  last_DMEM_Wr_exp;
reg [15:0] last_DMEM_o_exp;
reg [15:0] last_IMEM_o_exp;
reg [4:0] last_PC_o_exp;
reg [15:0] last_RegDr_o_exp;
reg  last_WrSrc_o_exp;
reg  last_ZERO_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADDR_o_prev = ADDR_o;
	ALU_Op_prev = ALU_Op;
	ALU_o_prev = ALU_o;
	DMEM_Wr_prev = DMEM_Wr;
	DMEM_o_prev = DMEM_o;
	IMEM_o_prev = IMEM_o;
	PC_o_prev = PC_o;
	RegDr_o_prev = RegDr_o;
	WrSrc_o_prev = WrSrc_o;
	ZERO_o_prev = ZERO_o;
end

// update expected /o prevs

always @(trigger)
begin
	ADDR_o_expected_prev = ADDR_o_expected;
	ALU_Op_expected_prev = ALU_Op_expected;
	ALU_o_expected_prev = ALU_o_expected;
	DMEM_Wr_expected_prev = DMEM_Wr_expected;
	DMEM_o_expected_prev = DMEM_o_expected;
	IMEM_o_expected_prev = IMEM_o_expected;
	PC_o_expected_prev = PC_o_expected;
	RegDr_o_expected_prev = RegDr_o_expected;
	WrSrc_o_expected_prev = WrSrc_o_expected;
	ZERO_o_expected_prev = ZERO_o_expected;
end


// expected IMEM_o[ 15 ]
initial
begin
	IMEM_o_expected[15] = 1'bX;
end 
// expected IMEM_o[ 14 ]
initial
begin
	IMEM_o_expected[14] = 1'bX;
end 
// expected IMEM_o[ 13 ]
initial
begin
	IMEM_o_expected[13] = 1'bX;
end 
// expected IMEM_o[ 12 ]
initial
begin
	IMEM_o_expected[12] = 1'bX;
end 
// expected IMEM_o[ 11 ]
initial
begin
	IMEM_o_expected[11] = 1'bX;
end 
// expected IMEM_o[ 10 ]
initial
begin
	IMEM_o_expected[10] = 1'bX;
end 
// expected IMEM_o[ 9 ]
initial
begin
	IMEM_o_expected[9] = 1'bX;
end 
// expected IMEM_o[ 8 ]
initial
begin
	IMEM_o_expected[8] = 1'bX;
end 
// expected IMEM_o[ 7 ]
initial
begin
	IMEM_o_expected[7] = 1'bX;
end 
// expected IMEM_o[ 6 ]
initial
begin
	IMEM_o_expected[6] = 1'bX;
end 
// expected IMEM_o[ 5 ]
initial
begin
	IMEM_o_expected[5] = 1'bX;
end 
// expected IMEM_o[ 4 ]
initial
begin
	IMEM_o_expected[4] = 1'bX;
end 
// expected IMEM_o[ 3 ]
initial
begin
	IMEM_o_expected[3] = 1'bX;
end 
// expected IMEM_o[ 2 ]
initial
begin
	IMEM_o_expected[2] = 1'bX;
end 
// expected IMEM_o[ 1 ]
initial
begin
	IMEM_o_expected[1] = 1'bX;
end 
// expected IMEM_o[ 0 ]
initial
begin
	IMEM_o_expected[0] = 1'bX;
end 

// expected PC_o[4]
initial
begin
	PC_o_expected[4] = 1'bX;
end 

// expected PC_o[3]
initial
begin
	PC_o_expected[3] = 1'bX;
end 

// expected PC_o[2]
initial
begin
	PC_o_expected[2] = 1'bX;
end 

// expected PC_o[1]
initial
begin
	PC_o_expected[1] = 1'bX;
end 

// expected PC_o[0]
initial
begin
	PC_o_expected[0] = 1'bX;
end 
// expected ADDR_o[ 2 ]
initial
begin
	ADDR_o_expected[2] = 1'bX;
end 
// expected ADDR_o[ 1 ]
initial
begin
	ADDR_o_expected[1] = 1'bX;
end 
// expected ADDR_o[ 0 ]
initial
begin
	ADDR_o_expected[0] = 1'bX;
end 
// expected ALU_Op[ 3 ]
initial
begin
	ALU_Op_expected[3] = 1'bX;
end 
// expected ALU_Op[ 2 ]
initial
begin
	ALU_Op_expected[2] = 1'bX;
end 
// expected ALU_Op[ 1 ]
initial
begin
	ALU_Op_expected[1] = 1'bX;
end 
// expected ALU_Op[ 0 ]
initial
begin
	ALU_Op_expected[0] = 1'bX;
end 
// expected ALU_o[ 15 ]
initial
begin
	ALU_o_expected[15] = 1'bX;
end 
// expected ALU_o[ 14 ]
initial
begin
	ALU_o_expected[14] = 1'bX;
end 
// expected ALU_o[ 13 ]
initial
begin
	ALU_o_expected[13] = 1'bX;
end 
// expected ALU_o[ 12 ]
initial
begin
	ALU_o_expected[12] = 1'bX;
end 
// expected ALU_o[ 11 ]
initial
begin
	ALU_o_expected[11] = 1'bX;
end 
// expected ALU_o[ 10 ]
initial
begin
	ALU_o_expected[10] = 1'bX;
end 
// expected ALU_o[ 9 ]
initial
begin
	ALU_o_expected[9] = 1'bX;
end 
// expected ALU_o[ 8 ]
initial
begin
	ALU_o_expected[8] = 1'bX;
end 
// expected ALU_o[ 7 ]
initial
begin
	ALU_o_expected[7] = 1'bX;
end 
// expected ALU_o[ 6 ]
initial
begin
	ALU_o_expected[6] = 1'bX;
end 
// expected ALU_o[ 5 ]
initial
begin
	ALU_o_expected[5] = 1'bX;
end 
// expected ALU_o[ 4 ]
initial
begin
	ALU_o_expected[4] = 1'bX;
end 
// expected ALU_o[ 3 ]
initial
begin
	ALU_o_expected[3] = 1'bX;
end 
// expected ALU_o[ 2 ]
initial
begin
	ALU_o_expected[2] = 1'bX;
end 
// expected ALU_o[ 1 ]
initial
begin
	ALU_o_expected[1] = 1'bX;
end 
// expected ALU_o[ 0 ]
initial
begin
	ALU_o_expected[0] = 1'bX;
end 
// expected DMEM_o[ 15 ]
initial
begin
	DMEM_o_expected[15] = 1'bX;
end 
// expected DMEM_o[ 14 ]
initial
begin
	DMEM_o_expected[14] = 1'bX;
end 
// expected DMEM_o[ 13 ]
initial
begin
	DMEM_o_expected[13] = 1'bX;
end 
// expected DMEM_o[ 12 ]
initial
begin
	DMEM_o_expected[12] = 1'bX;
end 
// expected DMEM_o[ 11 ]
initial
begin
	DMEM_o_expected[11] = 1'bX;
end 
// expected DMEM_o[ 10 ]
initial
begin
	DMEM_o_expected[10] = 1'bX;
end 
// expected DMEM_o[ 9 ]
initial
begin
	DMEM_o_expected[9] = 1'bX;
end 
// expected DMEM_o[ 8 ]
initial
begin
	DMEM_o_expected[8] = 1'bX;
end 
// expected DMEM_o[ 7 ]
initial
begin
	DMEM_o_expected[7] = 1'bX;
end 
// expected DMEM_o[ 6 ]
initial
begin
	DMEM_o_expected[6] = 1'bX;
end 
// expected DMEM_o[ 5 ]
initial
begin
	DMEM_o_expected[5] = 1'bX;
end 
// expected DMEM_o[ 4 ]
initial
begin
	DMEM_o_expected[4] = 1'bX;
end 
// expected DMEM_o[ 3 ]
initial
begin
	DMEM_o_expected[3] = 1'bX;
end 
// expected DMEM_o[ 2 ]
initial
begin
	DMEM_o_expected[2] = 1'bX;
end 
// expected DMEM_o[ 1 ]
initial
begin
	DMEM_o_expected[1] = 1'bX;
end 
// expected DMEM_o[ 0 ]
initial
begin
	DMEM_o_expected[0] = 1'bX;
end 
// expected RegDr_o[ 15 ]
initial
begin
	RegDr_o_expected[15] = 1'bX;
end 
// expected RegDr_o[ 14 ]
initial
begin
	RegDr_o_expected[14] = 1'bX;
end 
// expected RegDr_o[ 13 ]
initial
begin
	RegDr_o_expected[13] = 1'bX;
end 
// expected RegDr_o[ 12 ]
initial
begin
	RegDr_o_expected[12] = 1'bX;
end 
// expected RegDr_o[ 11 ]
initial
begin
	RegDr_o_expected[11] = 1'bX;
end 
// expected RegDr_o[ 10 ]
initial
begin
	RegDr_o_expected[10] = 1'bX;
end 
// expected RegDr_o[ 9 ]
initial
begin
	RegDr_o_expected[9] = 1'bX;
end 
// expected RegDr_o[ 8 ]
initial
begin
	RegDr_o_expected[8] = 1'bX;
end 
// expected RegDr_o[ 7 ]
initial
begin
	RegDr_o_expected[7] = 1'bX;
end 
// expected RegDr_o[ 6 ]
initial
begin
	RegDr_o_expected[6] = 1'bX;
end 
// expected RegDr_o[ 5 ]
initial
begin
	RegDr_o_expected[5] = 1'bX;
end 
// expected RegDr_o[ 4 ]
initial
begin
	RegDr_o_expected[4] = 1'bX;
end 
// expected RegDr_o[ 3 ]
initial
begin
	RegDr_o_expected[3] = 1'bX;
end 
// expected RegDr_o[ 2 ]
initial
begin
	RegDr_o_expected[2] = 1'bX;
end 
// expected RegDr_o[ 1 ]
initial
begin
	RegDr_o_expected[1] = 1'bX;
end 
// expected RegDr_o[ 0 ]
initial
begin
	RegDr_o_expected[0] = 1'bX;
end 

// expected DMEM_Wr
initial
begin
	DMEM_Wr_expected = 1'bX;
end 

// expected ZERO_o
initial
begin
	ZERO_o_expected = 1'bX;
end 

// expected WrSrc_o
initial
begin
	WrSrc_o_expected = 1'bX;
end 
// generate trigger
always @(ADDR_o_expected or ADDR_o or ALU_Op_expected or ALU_Op or ALU_o_expected or ALU_o or DMEM_Wr_expected or DMEM_Wr or DMEM_o_expected or DMEM_o or IMEM_o_expected or IMEM_o or PC_o_expected or PC_o or RegDr_o_expected or RegDr_o or WrSrc_o_expected or WrSrc_o or ZERO_o_expected or ZERO_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADDR_o = %b | expected ALU_Op = %b | expected ALU_o = %b | expected DMEM_Wr = %b | expected DMEM_o = %b | expected IMEM_o = %b | expected PC_o = %b | expected RegDr_o = %b | expected WrSrc_o = %b | expected ZERO_o = %b | ",ADDR_o_expected_prev,ALU_Op_expected_prev,ALU_o_expected_prev,DMEM_Wr_expected_prev,DMEM_o_expected_prev,IMEM_o_expected_prev,PC_o_expected_prev,RegDr_o_expected_prev,WrSrc_o_expected_prev,ZERO_o_expected_prev);
	$display("| real ADDR_o = %b | real ALU_Op = %b | real ALU_o = %b | real DMEM_Wr = %b | real DMEM_o = %b | real IMEM_o = %b | real PC_o = %b | real RegDr_o = %b | real WrSrc_o = %b | real ZERO_o = %b | ",ADDR_o_prev,ALU_Op_prev,ALU_o_prev,DMEM_Wr_prev,DMEM_o_prev,IMEM_o_prev,PC_o_prev,RegDr_o_prev,WrSrc_o_prev,ZERO_o_prev);
`endif
	if (
		( ADDR_o_expected_prev[0] !== 1'bx ) && ( ADDR_o_prev[0] !== ADDR_o_expected_prev[0] )
		&& ((ADDR_o_expected_prev[0] !== last_ADDR_o_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_o_expected_prev);
		$display ("     Real value = %b", ADDR_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_o_exp[0] = ADDR_o_expected_prev[0];
	end
	if (
		( ADDR_o_expected_prev[1] !== 1'bx ) && ( ADDR_o_prev[1] !== ADDR_o_expected_prev[1] )
		&& ((ADDR_o_expected_prev[1] !== last_ADDR_o_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_o_expected_prev);
		$display ("     Real value = %b", ADDR_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_o_exp[1] = ADDR_o_expected_prev[1];
	end
	if (
		( ADDR_o_expected_prev[2] !== 1'bx ) && ( ADDR_o_prev[2] !== ADDR_o_expected_prev[2] )
		&& ((ADDR_o_expected_prev[2] !== last_ADDR_o_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_o_expected_prev);
		$display ("     Real value = %b", ADDR_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_o_exp[2] = ADDR_o_expected_prev[2];
	end
	if (
		( ALU_Op_expected_prev[0] !== 1'bx ) && ( ALU_Op_prev[0] !== ALU_Op_expected_prev[0] )
		&& ((ALU_Op_expected_prev[0] !== last_ALU_Op_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Op_expected_prev);
		$display ("     Real value = %b", ALU_Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Op_exp[0] = ALU_Op_expected_prev[0];
	end
	if (
		( ALU_Op_expected_prev[1] !== 1'bx ) && ( ALU_Op_prev[1] !== ALU_Op_expected_prev[1] )
		&& ((ALU_Op_expected_prev[1] !== last_ALU_Op_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Op_expected_prev);
		$display ("     Real value = %b", ALU_Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Op_exp[1] = ALU_Op_expected_prev[1];
	end
	if (
		( ALU_Op_expected_prev[2] !== 1'bx ) && ( ALU_Op_prev[2] !== ALU_Op_expected_prev[2] )
		&& ((ALU_Op_expected_prev[2] !== last_ALU_Op_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Op[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Op_expected_prev);
		$display ("     Real value = %b", ALU_Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Op_exp[2] = ALU_Op_expected_prev[2];
	end
	if (
		( ALU_Op_expected_prev[3] !== 1'bx ) && ( ALU_Op_prev[3] !== ALU_Op_expected_prev[3] )
		&& ((ALU_Op_expected_prev[3] !== last_ALU_Op_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Op[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Op_expected_prev);
		$display ("     Real value = %b", ALU_Op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Op_exp[3] = ALU_Op_expected_prev[3];
	end
	if (
		( ALU_o_expected_prev[0] !== 1'bx ) && ( ALU_o_prev[0] !== ALU_o_expected_prev[0] )
		&& ((ALU_o_expected_prev[0] !== last_ALU_o_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[0] = ALU_o_expected_prev[0];
	end
	if (
		( ALU_o_expected_prev[1] !== 1'bx ) && ( ALU_o_prev[1] !== ALU_o_expected_prev[1] )
		&& ((ALU_o_expected_prev[1] !== last_ALU_o_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[1] = ALU_o_expected_prev[1];
	end
	if (
		( ALU_o_expected_prev[2] !== 1'bx ) && ( ALU_o_prev[2] !== ALU_o_expected_prev[2] )
		&& ((ALU_o_expected_prev[2] !== last_ALU_o_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[2] = ALU_o_expected_prev[2];
	end
	if (
		( ALU_o_expected_prev[3] !== 1'bx ) && ( ALU_o_prev[3] !== ALU_o_expected_prev[3] )
		&& ((ALU_o_expected_prev[3] !== last_ALU_o_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[3] = ALU_o_expected_prev[3];
	end
	if (
		( ALU_o_expected_prev[4] !== 1'bx ) && ( ALU_o_prev[4] !== ALU_o_expected_prev[4] )
		&& ((ALU_o_expected_prev[4] !== last_ALU_o_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[4] = ALU_o_expected_prev[4];
	end
	if (
		( ALU_o_expected_prev[5] !== 1'bx ) && ( ALU_o_prev[5] !== ALU_o_expected_prev[5] )
		&& ((ALU_o_expected_prev[5] !== last_ALU_o_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[5] = ALU_o_expected_prev[5];
	end
	if (
		( ALU_o_expected_prev[6] !== 1'bx ) && ( ALU_o_prev[6] !== ALU_o_expected_prev[6] )
		&& ((ALU_o_expected_prev[6] !== last_ALU_o_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[6] = ALU_o_expected_prev[6];
	end
	if (
		( ALU_o_expected_prev[7] !== 1'bx ) && ( ALU_o_prev[7] !== ALU_o_expected_prev[7] )
		&& ((ALU_o_expected_prev[7] !== last_ALU_o_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[7] = ALU_o_expected_prev[7];
	end
	if (
		( ALU_o_expected_prev[8] !== 1'bx ) && ( ALU_o_prev[8] !== ALU_o_expected_prev[8] )
		&& ((ALU_o_expected_prev[8] !== last_ALU_o_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[8] = ALU_o_expected_prev[8];
	end
	if (
		( ALU_o_expected_prev[9] !== 1'bx ) && ( ALU_o_prev[9] !== ALU_o_expected_prev[9] )
		&& ((ALU_o_expected_prev[9] !== last_ALU_o_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[9] = ALU_o_expected_prev[9];
	end
	if (
		( ALU_o_expected_prev[10] !== 1'bx ) && ( ALU_o_prev[10] !== ALU_o_expected_prev[10] )
		&& ((ALU_o_expected_prev[10] !== last_ALU_o_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[10] = ALU_o_expected_prev[10];
	end
	if (
		( ALU_o_expected_prev[11] !== 1'bx ) && ( ALU_o_prev[11] !== ALU_o_expected_prev[11] )
		&& ((ALU_o_expected_prev[11] !== last_ALU_o_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[11] = ALU_o_expected_prev[11];
	end
	if (
		( ALU_o_expected_prev[12] !== 1'bx ) && ( ALU_o_prev[12] !== ALU_o_expected_prev[12] )
		&& ((ALU_o_expected_prev[12] !== last_ALU_o_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[12] = ALU_o_expected_prev[12];
	end
	if (
		( ALU_o_expected_prev[13] !== 1'bx ) && ( ALU_o_prev[13] !== ALU_o_expected_prev[13] )
		&& ((ALU_o_expected_prev[13] !== last_ALU_o_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[13] = ALU_o_expected_prev[13];
	end
	if (
		( ALU_o_expected_prev[14] !== 1'bx ) && ( ALU_o_prev[14] !== ALU_o_expected_prev[14] )
		&& ((ALU_o_expected_prev[14] !== last_ALU_o_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[14] = ALU_o_expected_prev[14];
	end
	if (
		( ALU_o_expected_prev[15] !== 1'bx ) && ( ALU_o_prev[15] !== ALU_o_expected_prev[15] )
		&& ((ALU_o_expected_prev[15] !== last_ALU_o_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_o_expected_prev);
		$display ("     Real value = %b", ALU_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_o_exp[15] = ALU_o_expected_prev[15];
	end
	if (
		( DMEM_Wr_expected_prev !== 1'bx ) && ( DMEM_Wr_prev !== DMEM_Wr_expected_prev )
		&& ((DMEM_Wr_expected_prev !== last_DMEM_Wr_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_Wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_Wr_expected_prev);
		$display ("     Real value = %b", DMEM_Wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DMEM_Wr_exp = DMEM_Wr_expected_prev;
	end
	if (
		( DMEM_o_expected_prev[0] !== 1'bx ) && ( DMEM_o_prev[0] !== DMEM_o_expected_prev[0] )
		&& ((DMEM_o_expected_prev[0] !== last_DMEM_o_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[0] = DMEM_o_expected_prev[0];
	end
	if (
		( DMEM_o_expected_prev[1] !== 1'bx ) && ( DMEM_o_prev[1] !== DMEM_o_expected_prev[1] )
		&& ((DMEM_o_expected_prev[1] !== last_DMEM_o_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[1] = DMEM_o_expected_prev[1];
	end
	if (
		( DMEM_o_expected_prev[2] !== 1'bx ) && ( DMEM_o_prev[2] !== DMEM_o_expected_prev[2] )
		&& ((DMEM_o_expected_prev[2] !== last_DMEM_o_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[2] = DMEM_o_expected_prev[2];
	end
	if (
		( DMEM_o_expected_prev[3] !== 1'bx ) && ( DMEM_o_prev[3] !== DMEM_o_expected_prev[3] )
		&& ((DMEM_o_expected_prev[3] !== last_DMEM_o_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[3] = DMEM_o_expected_prev[3];
	end
	if (
		( DMEM_o_expected_prev[4] !== 1'bx ) && ( DMEM_o_prev[4] !== DMEM_o_expected_prev[4] )
		&& ((DMEM_o_expected_prev[4] !== last_DMEM_o_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[4] = DMEM_o_expected_prev[4];
	end
	if (
		( DMEM_o_expected_prev[5] !== 1'bx ) && ( DMEM_o_prev[5] !== DMEM_o_expected_prev[5] )
		&& ((DMEM_o_expected_prev[5] !== last_DMEM_o_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[5] = DMEM_o_expected_prev[5];
	end
	if (
		( DMEM_o_expected_prev[6] !== 1'bx ) && ( DMEM_o_prev[6] !== DMEM_o_expected_prev[6] )
		&& ((DMEM_o_expected_prev[6] !== last_DMEM_o_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[6] = DMEM_o_expected_prev[6];
	end
	if (
		( DMEM_o_expected_prev[7] !== 1'bx ) && ( DMEM_o_prev[7] !== DMEM_o_expected_prev[7] )
		&& ((DMEM_o_expected_prev[7] !== last_DMEM_o_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[7] = DMEM_o_expected_prev[7];
	end
	if (
		( DMEM_o_expected_prev[8] !== 1'bx ) && ( DMEM_o_prev[8] !== DMEM_o_expected_prev[8] )
		&& ((DMEM_o_expected_prev[8] !== last_DMEM_o_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[8] = DMEM_o_expected_prev[8];
	end
	if (
		( DMEM_o_expected_prev[9] !== 1'bx ) && ( DMEM_o_prev[9] !== DMEM_o_expected_prev[9] )
		&& ((DMEM_o_expected_prev[9] !== last_DMEM_o_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[9] = DMEM_o_expected_prev[9];
	end
	if (
		( DMEM_o_expected_prev[10] !== 1'bx ) && ( DMEM_o_prev[10] !== DMEM_o_expected_prev[10] )
		&& ((DMEM_o_expected_prev[10] !== last_DMEM_o_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[10] = DMEM_o_expected_prev[10];
	end
	if (
		( DMEM_o_expected_prev[11] !== 1'bx ) && ( DMEM_o_prev[11] !== DMEM_o_expected_prev[11] )
		&& ((DMEM_o_expected_prev[11] !== last_DMEM_o_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[11] = DMEM_o_expected_prev[11];
	end
	if (
		( DMEM_o_expected_prev[12] !== 1'bx ) && ( DMEM_o_prev[12] !== DMEM_o_expected_prev[12] )
		&& ((DMEM_o_expected_prev[12] !== last_DMEM_o_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[12] = DMEM_o_expected_prev[12];
	end
	if (
		( DMEM_o_expected_prev[13] !== 1'bx ) && ( DMEM_o_prev[13] !== DMEM_o_expected_prev[13] )
		&& ((DMEM_o_expected_prev[13] !== last_DMEM_o_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[13] = DMEM_o_expected_prev[13];
	end
	if (
		( DMEM_o_expected_prev[14] !== 1'bx ) && ( DMEM_o_prev[14] !== DMEM_o_expected_prev[14] )
		&& ((DMEM_o_expected_prev[14] !== last_DMEM_o_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[14] = DMEM_o_expected_prev[14];
	end
	if (
		( DMEM_o_expected_prev[15] !== 1'bx ) && ( DMEM_o_prev[15] !== DMEM_o_expected_prev[15] )
		&& ((DMEM_o_expected_prev[15] !== last_DMEM_o_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMEM_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMEM_o_expected_prev);
		$display ("     Real value = %b", DMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMEM_o_exp[15] = DMEM_o_expected_prev[15];
	end
	if (
		( IMEM_o_expected_prev[0] !== 1'bx ) && ( IMEM_o_prev[0] !== IMEM_o_expected_prev[0] )
		&& ((IMEM_o_expected_prev[0] !== last_IMEM_o_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[0] = IMEM_o_expected_prev[0];
	end
	if (
		( IMEM_o_expected_prev[1] !== 1'bx ) && ( IMEM_o_prev[1] !== IMEM_o_expected_prev[1] )
		&& ((IMEM_o_expected_prev[1] !== last_IMEM_o_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[1] = IMEM_o_expected_prev[1];
	end
	if (
		( IMEM_o_expected_prev[2] !== 1'bx ) && ( IMEM_o_prev[2] !== IMEM_o_expected_prev[2] )
		&& ((IMEM_o_expected_prev[2] !== last_IMEM_o_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[2] = IMEM_o_expected_prev[2];
	end
	if (
		( IMEM_o_expected_prev[3] !== 1'bx ) && ( IMEM_o_prev[3] !== IMEM_o_expected_prev[3] )
		&& ((IMEM_o_expected_prev[3] !== last_IMEM_o_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[3] = IMEM_o_expected_prev[3];
	end
	if (
		( IMEM_o_expected_prev[4] !== 1'bx ) && ( IMEM_o_prev[4] !== IMEM_o_expected_prev[4] )
		&& ((IMEM_o_expected_prev[4] !== last_IMEM_o_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[4] = IMEM_o_expected_prev[4];
	end
	if (
		( IMEM_o_expected_prev[5] !== 1'bx ) && ( IMEM_o_prev[5] !== IMEM_o_expected_prev[5] )
		&& ((IMEM_o_expected_prev[5] !== last_IMEM_o_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[5] = IMEM_o_expected_prev[5];
	end
	if (
		( IMEM_o_expected_prev[6] !== 1'bx ) && ( IMEM_o_prev[6] !== IMEM_o_expected_prev[6] )
		&& ((IMEM_o_expected_prev[6] !== last_IMEM_o_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[6] = IMEM_o_expected_prev[6];
	end
	if (
		( IMEM_o_expected_prev[7] !== 1'bx ) && ( IMEM_o_prev[7] !== IMEM_o_expected_prev[7] )
		&& ((IMEM_o_expected_prev[7] !== last_IMEM_o_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[7] = IMEM_o_expected_prev[7];
	end
	if (
		( IMEM_o_expected_prev[8] !== 1'bx ) && ( IMEM_o_prev[8] !== IMEM_o_expected_prev[8] )
		&& ((IMEM_o_expected_prev[8] !== last_IMEM_o_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[8] = IMEM_o_expected_prev[8];
	end
	if (
		( IMEM_o_expected_prev[9] !== 1'bx ) && ( IMEM_o_prev[9] !== IMEM_o_expected_prev[9] )
		&& ((IMEM_o_expected_prev[9] !== last_IMEM_o_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[9] = IMEM_o_expected_prev[9];
	end
	if (
		( IMEM_o_expected_prev[10] !== 1'bx ) && ( IMEM_o_prev[10] !== IMEM_o_expected_prev[10] )
		&& ((IMEM_o_expected_prev[10] !== last_IMEM_o_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[10] = IMEM_o_expected_prev[10];
	end
	if (
		( IMEM_o_expected_prev[11] !== 1'bx ) && ( IMEM_o_prev[11] !== IMEM_o_expected_prev[11] )
		&& ((IMEM_o_expected_prev[11] !== last_IMEM_o_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[11] = IMEM_o_expected_prev[11];
	end
	if (
		( IMEM_o_expected_prev[12] !== 1'bx ) && ( IMEM_o_prev[12] !== IMEM_o_expected_prev[12] )
		&& ((IMEM_o_expected_prev[12] !== last_IMEM_o_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[12] = IMEM_o_expected_prev[12];
	end
	if (
		( IMEM_o_expected_prev[13] !== 1'bx ) && ( IMEM_o_prev[13] !== IMEM_o_expected_prev[13] )
		&& ((IMEM_o_expected_prev[13] !== last_IMEM_o_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[13] = IMEM_o_expected_prev[13];
	end
	if (
		( IMEM_o_expected_prev[14] !== 1'bx ) && ( IMEM_o_prev[14] !== IMEM_o_expected_prev[14] )
		&& ((IMEM_o_expected_prev[14] !== last_IMEM_o_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[14] = IMEM_o_expected_prev[14];
	end
	if (
		( IMEM_o_expected_prev[15] !== 1'bx ) && ( IMEM_o_prev[15] !== IMEM_o_expected_prev[15] )
		&& ((IMEM_o_expected_prev[15] !== last_IMEM_o_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMEM_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMEM_o_expected_prev);
		$display ("     Real value = %b", IMEM_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IMEM_o_exp[15] = IMEM_o_expected_prev[15];
	end
	if (
		( PC_o_expected_prev[0] !== 1'bx ) && ( PC_o_prev[0] !== PC_o_expected_prev[0] )
		&& ((PC_o_expected_prev[0] !== last_PC_o_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_o_expected_prev);
		$display ("     Real value = %b", PC_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_o_exp[0] = PC_o_expected_prev[0];
	end
	if (
		( PC_o_expected_prev[1] !== 1'bx ) && ( PC_o_prev[1] !== PC_o_expected_prev[1] )
		&& ((PC_o_expected_prev[1] !== last_PC_o_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_o_expected_prev);
		$display ("     Real value = %b", PC_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_o_exp[1] = PC_o_expected_prev[1];
	end
	if (
		( PC_o_expected_prev[2] !== 1'bx ) && ( PC_o_prev[2] !== PC_o_expected_prev[2] )
		&& ((PC_o_expected_prev[2] !== last_PC_o_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_o_expected_prev);
		$display ("     Real value = %b", PC_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_o_exp[2] = PC_o_expected_prev[2];
	end
	if (
		( PC_o_expected_prev[3] !== 1'bx ) && ( PC_o_prev[3] !== PC_o_expected_prev[3] )
		&& ((PC_o_expected_prev[3] !== last_PC_o_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_o_expected_prev);
		$display ("     Real value = %b", PC_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_o_exp[3] = PC_o_expected_prev[3];
	end
	if (
		( PC_o_expected_prev[4] !== 1'bx ) && ( PC_o_prev[4] !== PC_o_expected_prev[4] )
		&& ((PC_o_expected_prev[4] !== last_PC_o_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_o_expected_prev);
		$display ("     Real value = %b", PC_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PC_o_exp[4] = PC_o_expected_prev[4];
	end
	if (
		( RegDr_o_expected_prev[0] !== 1'bx ) && ( RegDr_o_prev[0] !== RegDr_o_expected_prev[0] )
		&& ((RegDr_o_expected_prev[0] !== last_RegDr_o_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[0] = RegDr_o_expected_prev[0];
	end
	if (
		( RegDr_o_expected_prev[1] !== 1'bx ) && ( RegDr_o_prev[1] !== RegDr_o_expected_prev[1] )
		&& ((RegDr_o_expected_prev[1] !== last_RegDr_o_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[1] = RegDr_o_expected_prev[1];
	end
	if (
		( RegDr_o_expected_prev[2] !== 1'bx ) && ( RegDr_o_prev[2] !== RegDr_o_expected_prev[2] )
		&& ((RegDr_o_expected_prev[2] !== last_RegDr_o_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[2] = RegDr_o_expected_prev[2];
	end
	if (
		( RegDr_o_expected_prev[3] !== 1'bx ) && ( RegDr_o_prev[3] !== RegDr_o_expected_prev[3] )
		&& ((RegDr_o_expected_prev[3] !== last_RegDr_o_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[3] = RegDr_o_expected_prev[3];
	end
	if (
		( RegDr_o_expected_prev[4] !== 1'bx ) && ( RegDr_o_prev[4] !== RegDr_o_expected_prev[4] )
		&& ((RegDr_o_expected_prev[4] !== last_RegDr_o_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[4] = RegDr_o_expected_prev[4];
	end
	if (
		( RegDr_o_expected_prev[5] !== 1'bx ) && ( RegDr_o_prev[5] !== RegDr_o_expected_prev[5] )
		&& ((RegDr_o_expected_prev[5] !== last_RegDr_o_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[5] = RegDr_o_expected_prev[5];
	end
	if (
		( RegDr_o_expected_prev[6] !== 1'bx ) && ( RegDr_o_prev[6] !== RegDr_o_expected_prev[6] )
		&& ((RegDr_o_expected_prev[6] !== last_RegDr_o_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[6] = RegDr_o_expected_prev[6];
	end
	if (
		( RegDr_o_expected_prev[7] !== 1'bx ) && ( RegDr_o_prev[7] !== RegDr_o_expected_prev[7] )
		&& ((RegDr_o_expected_prev[7] !== last_RegDr_o_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[7] = RegDr_o_expected_prev[7];
	end
	if (
		( RegDr_o_expected_prev[8] !== 1'bx ) && ( RegDr_o_prev[8] !== RegDr_o_expected_prev[8] )
		&& ((RegDr_o_expected_prev[8] !== last_RegDr_o_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[8] = RegDr_o_expected_prev[8];
	end
	if (
		( RegDr_o_expected_prev[9] !== 1'bx ) && ( RegDr_o_prev[9] !== RegDr_o_expected_prev[9] )
		&& ((RegDr_o_expected_prev[9] !== last_RegDr_o_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[9] = RegDr_o_expected_prev[9];
	end
	if (
		( RegDr_o_expected_prev[10] !== 1'bx ) && ( RegDr_o_prev[10] !== RegDr_o_expected_prev[10] )
		&& ((RegDr_o_expected_prev[10] !== last_RegDr_o_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[10] = RegDr_o_expected_prev[10];
	end
	if (
		( RegDr_o_expected_prev[11] !== 1'bx ) && ( RegDr_o_prev[11] !== RegDr_o_expected_prev[11] )
		&& ((RegDr_o_expected_prev[11] !== last_RegDr_o_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[11] = RegDr_o_expected_prev[11];
	end
	if (
		( RegDr_o_expected_prev[12] !== 1'bx ) && ( RegDr_o_prev[12] !== RegDr_o_expected_prev[12] )
		&& ((RegDr_o_expected_prev[12] !== last_RegDr_o_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[12] = RegDr_o_expected_prev[12];
	end
	if (
		( RegDr_o_expected_prev[13] !== 1'bx ) && ( RegDr_o_prev[13] !== RegDr_o_expected_prev[13] )
		&& ((RegDr_o_expected_prev[13] !== last_RegDr_o_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[13] = RegDr_o_expected_prev[13];
	end
	if (
		( RegDr_o_expected_prev[14] !== 1'bx ) && ( RegDr_o_prev[14] !== RegDr_o_expected_prev[14] )
		&& ((RegDr_o_expected_prev[14] !== last_RegDr_o_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[14] = RegDr_o_expected_prev[14];
	end
	if (
		( RegDr_o_expected_prev[15] !== 1'bx ) && ( RegDr_o_prev[15] !== RegDr_o_expected_prev[15] )
		&& ((RegDr_o_expected_prev[15] !== last_RegDr_o_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDr_o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDr_o_expected_prev);
		$display ("     Real value = %b", RegDr_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDr_o_exp[15] = RegDr_o_expected_prev[15];
	end
	if (
		( WrSrc_o_expected_prev !== 1'bx ) && ( WrSrc_o_prev !== WrSrc_o_expected_prev )
		&& ((WrSrc_o_expected_prev !== last_WrSrc_o_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WrSrc_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WrSrc_o_expected_prev);
		$display ("     Real value = %b", WrSrc_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_WrSrc_o_exp = WrSrc_o_expected_prev;
	end
	if (
		( ZERO_o_expected_prev !== 1'bx ) && ( ZERO_o_prev !== ZERO_o_expected_prev )
		&& ((ZERO_o_expected_prev !== last_ZERO_o_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_o_expected_prev);
		$display ("     Real value = %b", ZERO_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ZERO_o_exp = ZERO_o_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Processer_16bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [2:0] ADDR_o;
wire [3:0] ALU_Op;
wire [15:0] ALU_o;
wire DMEM_Wr;
wire [15:0] DMEM_o;
wire [15:0] IMEM_o;
wire [4:0] PC_o;
wire [15:0] RegDr_o;
wire WrSrc_o;
wire ZERO_o;

wire sampler;                             

// assign statements (if any)                          
Processer_16bit i1 (
// port map - connection between master ports and signals/registers   
	.ADDR_o(ADDR_o),
	.ALU_Op(ALU_Op),
	.ALU_o(ALU_o),
	.DMEM_Wr(DMEM_Wr),
	.DMEM_o(DMEM_o),
	.IMEM_o(IMEM_o),
	.PC_o(PC_o),
	.RegDr_o(RegDr_o),
	.WrSrc_o(WrSrc_o),
	.ZERO_o(ZERO_o),
	.clk(clk)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

Processer_16bit_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

Processer_16bit_vlg_check_tst tb_out(
	.ADDR_o(ADDR_o),
	.ALU_Op(ALU_Op),
	.ALU_o(ALU_o),
	.DMEM_Wr(DMEM_Wr),
	.DMEM_o(DMEM_o),
	.IMEM_o(IMEM_o),
	.PC_o(PC_o),
	.RegDr_o(RegDr_o),
	.WrSrc_o(WrSrc_o),
	.ZERO_o(ZERO_o),
	.sampler_rx(sampler)
);
endmodule

